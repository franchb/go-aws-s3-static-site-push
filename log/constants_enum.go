// Code generated by go-enum
// DO NOT EDIT!

package log

import (
	"fmt"
	"strings"
)

const (
	// LevelInfo is a Level of type Info
	LevelInfo Level = iota
	// LevelWarning is a Level of type Warning
	LevelWarning
	// LevelDebug is a Level of type Debug
	LevelDebug
)

const _LevelName = "InfoWarningDebug"

var _LevelMap = map[Level]string{
	0: _LevelName[0:4],
	1: _LevelName[4:11],
	2: _LevelName[11:16],
}

// String implements the Stringer interface.
func (x Level) String() string {
	if str, ok := _LevelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Level(%d)", x)
}

var _LevelValue = map[string]Level{
	_LevelName[0:4]:                    0,
	strings.ToLower(_LevelName[0:4]):   0,
	_LevelName[4:11]:                   1,
	strings.ToLower(_LevelName[4:11]):  1,
	_LevelName[11:16]:                  2,
	strings.ToLower(_LevelName[11:16]): 2,
}

// ParseLevel attempts to convert a string to a Level
func ParseLevel(name string) (Level, error) {
	if x, ok := _LevelValue[name]; ok {
		return x, nil
	}
	return Level(0), fmt.Errorf("%s is not a valid Level", name)
}

// Set implements the Golang flag.Value interface func.
func (x *Level) Set(val string) error {
	v, err := ParseLevel(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Level) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Level) Type() string {
	return "Level"
}
